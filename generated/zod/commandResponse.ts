import { z } from 'https://deno.land/x/zod/mod.ts';
import {
    AccountConfigurationPayload,
    ActivationLockBypassCodeResponse,
    ActiveNSExtensionsPayload,
    ActiveNSExtensionsResponse,
    ApplyRedemptionCodePayload,
    AuthenticateResponse,
    AvailableOSUpdatesResponse,
    CertificateListPayload,
    CertificateListResponse,
    CheckOutResponse,
    ClearPasscodePayload,
    ContentCachingInformationResponse,
    DeclarativeManagementPayload,
    DeclarativeManagementResponse,
    DeleteUserPayload,
    DeviceInformationPayload,
    DeviceInformationResponse,
    DeviceLocationResponse,
    DeviceLockPayload,
    DeviceLockResponse,
    EnableLostModePayload,
    EraseDevicePayload,
    GetBootstrapTokenPayload,
    GetBootstrapTokenResponse,
    GetTokenPayload,
    GetTokenResponse,
    InstallApplicationPayload,
    InstallApplicationResponse,
    InstalledApplicationListPayload,
    InstalledApplicationListResponse,
    InstallEnterpriseApplicationPayload,
    InstallMediaPayload,
    InstallMediaResponse,
    InstallProfilePayload,
    InstallProvisioningProfilePayload,
    InviteToProgramPayload,
    InviteToProgramResponse,
    LOMDeviceRequestPayload,
    LOMDeviceRequestResponse,
    LOMSetupRequestResponse,
    ManagedApplicationAttributesPayload,
    ManagedApplicationAttributesResponse,
    ManagedApplicationConfigurationPayload,
    ManagedApplicationConfigurationResponse,
    ManagedApplicationFeedbackPayload,
    ManagedApplicationFeedbackResponse,
    ManagedApplicationListPayload,
    ManagedApplicationListResponse,
    ManagedMediaListResponse,
    NSExtensionMappingsResponse,
    OSUpdateStatusResponse,
    ProfileListPayload,
    ProfileListResponse,
    ProvisioningProfileListPayload,
    ProvisioningProfileListResponse,
    RefreshCellularPlansPayload,
    RemoveApplicationPayload,
    RemoveMediaPayload,
    RemoveProfilePayload,
    RemoveProvisioningProfilePayload,
    RequestMirroringPayload,
    RequestMirroringResponse,
    RequestUnlockTokenResponse,
    RestartDevicePayload,
    RestrictionsPayload,
    RestrictionsResponse,
    RotateFileVaultKeyPayload,
    RotateFileVaultKeyResponse,
    ScheduleOSUpdatePayload,
    ScheduleOSUpdateResponse,
    ScheduleOSUpdateScanPayload,
    ScheduleOSUpdateScanResponse,
    SecurityInfoResponse,
    SetAutoAdminPasswordPayload,
    SetBootstrapTokenResponse,
    SetFirmwarePasswordPayload,
    SetFirmwarePasswordResponse,
    SetRecoveryLockPayload,
    SettingsPayload,
    SettingsResponse,
    TokenUpdateResponse,
    UnlockUserAccountPayload,
    UserAuthenticateResponse,
    UserListResponse,
    ValidateApplicationsPayload,
    VerifyFirmwarePasswordPayload,
    VerifyFirmwarePasswordResponse,
    VerifyRecoveryLockPayload,
    VerifyRecoveryLockResponse,
} from './mod.ts';
export enum CommandTypes {
    Authenticate = 'Authenticate',
    CheckOut = 'CheckOut',
    DeclarativeManagement = 'DeclarativeManagement',
    GetBootstrapToken = 'GetBootstrapToken',
    GetToken = 'GetToken',
    SetBootstrapToken = 'SetBootstrapToken',
    TokenUpdate = 'TokenUpdate',
    UserAuthenticate = 'UserAuthenticate',
    AccountConfiguration = 'AccountConfiguration',
    ActiveNSExtensions = 'ActiveNSExtensions',
    NSExtensionMappings = 'NSExtensionMappings',
    InstallEnterpriseApplication = 'InstallEnterpriseApplication',
    InstallApplication = 'InstallApplication',
    InstalledApplicationList = 'InstalledApplicationList',
    InviteToProgram = 'InviteToProgram',
    ManagedApplicationList = 'ManagedApplicationList',
    ApplyRedemptionCode = 'ApplyRedemptionCode',
    RemoveApplication = 'RemoveApplication',
    ValidateApplications = 'ValidateApplications',
    CertificateList = 'CertificateList',
    ActivationLockBypassCode = 'ActivationLockBypassCode',
    ClearActivationLockBypassCode = 'ClearActivationLockBypassCode',
    DeviceConfigured = 'DeviceConfigured',
    EraseDevice = 'EraseDevice',
    RefreshCellularPlans = 'RefreshCellularPlans',
    DeviceLock = 'DeviceLock',
    DisableLostMode = 'DisableLostMode',
    EnableLostMode = 'EnableLostMode',
    DeviceLocation = 'DeviceLocation',
    PlayLostModeSound = 'PlayLostModeSound',
    RestartDevice = 'RestartDevice',
    ClearRestrictionsPassword = 'ClearRestrictionsPassword',
    Restrictions = 'Restrictions',
    ShutDownDevice = 'ShutDownDevice',
    ContentCachingInformation = 'ContentCachingInformation',
    DeviceInformation = 'DeviceInformation',
    SecurityInfo = 'SecurityInfo',
    LOMDeviceRequest = 'LOMDeviceRequest',
    LOMSetupRequest = 'LOMSetupRequest',
    ManagedApplicationAttributes = 'ManagedApplicationAttributes',
    ManagedApplicationConfiguration = 'ManagedApplicationConfiguration',
    ManagedApplicationFeedback = 'ManagedApplicationFeedback',
    InstallMedia = 'InstallMedia',
    ManagedMediaList = 'ManagedMediaList',
    RemoveMedia = 'RemoveMedia',
    RequestMirroring = 'RequestMirroring',
    StopMirroring = 'StopMirroring',
    ClearPasscode = 'ClearPasscode',
    SetFirmwarePassword = 'SetFirmwarePassword',
    VerifyFirmwarePassword = 'VerifyFirmwarePassword',
    SetRecoveryLock = 'SetRecoveryLock',
    VerifyRecoveryLock = 'VerifyRecoveryLock',
    RequestUnlockToken = 'RequestUnlockToken',
    InstallProfile = 'InstallProfile',
    ProfileList = 'ProfileList',
    InstallProvisioningProfile = 'InstallProvisioningProfile',
    ProvisioningProfileList = 'ProvisioningProfileList',
    RemoveProvisioningProfile = 'RemoveProvisioningProfile',
    RemoveProfile = 'RemoveProfile',
    DisableRemoteDesktop = 'DisableRemoteDesktop',
    EnableRemoteDesktop = 'EnableRemoteDesktop',
    RotateFileVaultKey = 'RotateFileVaultKey',
    SetAutoAdminPassword = 'SetAutoAdminPassword',
    Settings = 'Settings',
    AvailableOSUpdates = 'AvailableOSUpdates',
    ScheduleOSUpdateScan = 'ScheduleOSUpdateScan',
    ScheduleOSUpdate = 'ScheduleOSUpdate',
    OSUpdateStatus = 'OSUpdateStatus',
    UserConfigured = 'UserConfigured',
    DeleteUser = 'DeleteUser',
    UserList = 'UserList',
    LogOutUser = 'LogOutUser',
    UnlockUserAccount = 'UnlockUserAccount',
}
export const commandResponse = z.discriminatedUnion('command_type', [
    z.object({
        command_type: z.literal(CommandTypes.Authenticate),
        response: AuthenticateResponse.optional(),
    }),
    z.object({
        command_type: z.literal(CommandTypes.CheckOut),
        response: CheckOutResponse.optional(),
    }),
    z.object({
        command_type: z.literal(CommandTypes.DeclarativeManagement),
        payload: DeclarativeManagementPayload,
        response: DeclarativeManagementResponse.optional(),
    }),
    z.object({
        command_type: z.literal(CommandTypes.GetBootstrapToken),
        payload: GetBootstrapTokenPayload,
        response: GetBootstrapTokenResponse.optional(),
    }),
    z.object({
        command_type: z.literal(CommandTypes.GetToken),
        payload: GetTokenPayload,
        response: GetTokenResponse.optional(),
    }),
    z.object({
        command_type: z.literal(CommandTypes.SetBootstrapToken),
        response: SetBootstrapTokenResponse.optional(),
    }),
    z.object({
        command_type: z.literal(CommandTypes.TokenUpdate),
        response: TokenUpdateResponse.optional(),
    }),
    z.object({
        command_type: z.literal(CommandTypes.UserAuthenticate),
        response: UserAuthenticateResponse.optional(),
    }),
    z.object({
        command_type: z.literal(CommandTypes.AccountConfiguration),
        payload: AccountConfigurationPayload,
        response: z.object({}).optional(),
    }),
    z.object({
        command_type: z.literal(CommandTypes.ActiveNSExtensions),
        payload: ActiveNSExtensionsPayload,
        response: ActiveNSExtensionsResponse.optional(),
    }),
    z.object({
        command_type: z.literal(CommandTypes.NSExtensionMappings),
        response: NSExtensionMappingsResponse.optional(),
    }),
    z.object({
        command_type: z.literal(CommandTypes.InstallEnterpriseApplication),
        payload: InstallEnterpriseApplicationPayload,
        response: z.object({}).optional(),
    }),
    z.object({
        command_type: z.literal(CommandTypes.InstallApplication),
        payload: InstallApplicationPayload,
        response: InstallApplicationResponse.optional(),
    }),
    z.object({
        command_type: z.literal(CommandTypes.InstalledApplicationList),
        payload: InstalledApplicationListPayload,
        response: InstalledApplicationListResponse.optional(),
    }),
    z.object({
        command_type: z.literal(CommandTypes.InviteToProgram),
        payload: InviteToProgramPayload,
        response: InviteToProgramResponse.optional(),
    }),
    z.object({
        command_type: z.literal(CommandTypes.ManagedApplicationList),
        payload: ManagedApplicationListPayload,
        response: ManagedApplicationListResponse.optional(),
    }),
    z.object({
        command_type: z.literal(CommandTypes.ApplyRedemptionCode),
        payload: ApplyRedemptionCodePayload,
        response: z.object({}).optional(),
    }),
    z.object({
        command_type: z.literal(CommandTypes.RemoveApplication),
        payload: RemoveApplicationPayload,
        response: z.object({}).optional(),
    }),
    z.object({
        command_type: z.literal(CommandTypes.ValidateApplications),
        payload: ValidateApplicationsPayload,
        response: z.object({}).optional(),
    }),
    z.object({
        command_type: z.literal(CommandTypes.CertificateList),
        payload: CertificateListPayload,
        response: CertificateListResponse.optional(),
    }),
    z.object({
        command_type: z.literal(CommandTypes.ActivationLockBypassCode),
        response: ActivationLockBypassCodeResponse.optional(),
    }),
    z.object({
        command_type: z.literal(CommandTypes.ClearActivationLockBypassCode),
        response: z.object({}).optional(),
    }),
    z.object({
        command_type: z.literal(CommandTypes.DeviceConfigured),
        response: z.object({}).optional(),
    }),
    z.object({
        command_type: z.literal(CommandTypes.EraseDevice),
        payload: EraseDevicePayload,
        response: z.object({}).optional(),
    }),
    z.object({
        command_type: z.literal(CommandTypes.RefreshCellularPlans),
        payload: RefreshCellularPlansPayload,
        response: z.object({}).optional(),
    }),
    z.object({
        command_type: z.literal(CommandTypes.DeviceLock),
        payload: DeviceLockPayload,
        response: DeviceLockResponse.optional(),
    }),
    z.object({
        command_type: z.literal(CommandTypes.DisableLostMode),
        response: z.object({}).optional(),
    }),
    z.object({
        command_type: z.literal(CommandTypes.EnableLostMode),
        payload: EnableLostModePayload,
        response: z.object({}).optional(),
    }),
    z.object({
        command_type: z.literal(CommandTypes.DeviceLocation),
        response: DeviceLocationResponse.optional(),
    }),
    z.object({
        command_type: z.literal(CommandTypes.PlayLostModeSound),
        response: z.object({}).optional(),
    }),
    z.object({
        command_type: z.literal(CommandTypes.RestartDevice),
        payload: RestartDevicePayload,
        response: z.object({}).optional(),
    }),
    z.object({
        command_type: z.literal(CommandTypes.ClearRestrictionsPassword),
        response: z.object({}).optional(),
    }),
    z.object({
        command_type: z.literal(CommandTypes.Restrictions),
        payload: RestrictionsPayload,
        response: RestrictionsResponse.optional(),
    }),
    z.object({
        command_type: z.literal(CommandTypes.ShutDownDevice),
        response: z.object({}).optional(),
    }),
    z.object({
        command_type: z.literal(CommandTypes.ContentCachingInformation),
        response: ContentCachingInformationResponse.optional(),
    }),
    z.object({
        command_type: z.literal(CommandTypes.DeviceInformation),
        payload: DeviceInformationPayload,
        response: DeviceInformationResponse.optional(),
    }),
    z.object({
        command_type: z.literal(CommandTypes.SecurityInfo),
        response: SecurityInfoResponse.optional(),
    }),
    z.object({
        command_type: z.literal(CommandTypes.LOMDeviceRequest),
        payload: LOMDeviceRequestPayload,
        response: LOMDeviceRequestResponse.optional(),
    }),
    z.object({
        command_type: z.literal(CommandTypes.LOMSetupRequest),
        response: LOMSetupRequestResponse.optional(),
    }),
    z.object({
        command_type: z.literal(CommandTypes.ManagedApplicationAttributes),
        payload: ManagedApplicationAttributesPayload,
        response: ManagedApplicationAttributesResponse.optional(),
    }),
    z.object({
        command_type: z.literal(CommandTypes.ManagedApplicationConfiguration),
        payload: ManagedApplicationConfigurationPayload,
        response: ManagedApplicationConfigurationResponse.optional(),
    }),
    z.object({
        command_type: z.literal(CommandTypes.ManagedApplicationFeedback),
        payload: ManagedApplicationFeedbackPayload,
        response: ManagedApplicationFeedbackResponse.optional(),
    }),
    z.object({
        command_type: z.literal(CommandTypes.InstallMedia),
        payload: InstallMediaPayload,
        response: InstallMediaResponse.optional(),
    }),
    z.object({
        command_type: z.literal(CommandTypes.ManagedMediaList),
        response: ManagedMediaListResponse.optional(),
    }),
    z.object({
        command_type: z.literal(CommandTypes.RemoveMedia),
        payload: RemoveMediaPayload,
        response: z.object({}).optional(),
    }),
    z.object({
        command_type: z.literal(CommandTypes.RequestMirroring),
        payload: RequestMirroringPayload,
        response: RequestMirroringResponse.optional(),
    }),
    z.object({
        command_type: z.literal(CommandTypes.StopMirroring),
        response: z.object({}).optional(),
    }),
    z.object({
        command_type: z.literal(CommandTypes.ClearPasscode),
        payload: ClearPasscodePayload,
        response: z.object({}).optional(),
    }),
    z.object({
        command_type: z.literal(CommandTypes.SetFirmwarePassword),
        payload: SetFirmwarePasswordPayload,
        response: SetFirmwarePasswordResponse.optional(),
    }),
    z.object({
        command_type: z.literal(CommandTypes.VerifyFirmwarePassword),
        payload: VerifyFirmwarePasswordPayload,
        response: VerifyFirmwarePasswordResponse.optional(),
    }),
    z.object({
        command_type: z.literal(CommandTypes.SetRecoveryLock),
        payload: SetRecoveryLockPayload,
        response: z.object({}).optional(),
    }),
    z.object({
        command_type: z.literal(CommandTypes.VerifyRecoveryLock),
        payload: VerifyRecoveryLockPayload,
        response: VerifyRecoveryLockResponse.optional(),
    }),
    z.object({
        command_type: z.literal(CommandTypes.RequestUnlockToken),
        response: RequestUnlockTokenResponse.optional(),
    }),
    z.object({
        command_type: z.literal(CommandTypes.InstallProfile),
        payload: InstallProfilePayload,
        response: z.object({}).optional(),
    }),
    z.object({
        command_type: z.literal(CommandTypes.ProfileList),
        payload: ProfileListPayload,
        response: ProfileListResponse.optional(),
    }),
    z.object({
        command_type: z.literal(CommandTypes.InstallProvisioningProfile),
        payload: InstallProvisioningProfilePayload,
        response: z.object({}).optional(),
    }),
    z.object({
        command_type: z.literal(CommandTypes.ProvisioningProfileList),
        payload: ProvisioningProfileListPayload,
        response: ProvisioningProfileListResponse.optional(),
    }),
    z.object({
        command_type: z.literal(CommandTypes.RemoveProvisioningProfile),
        payload: RemoveProvisioningProfilePayload,
        response: z.object({}).optional(),
    }),
    z.object({
        command_type: z.literal(CommandTypes.RemoveProfile),
        payload: RemoveProfilePayload,
        response: z.object({}).optional(),
    }),
    z.object({
        command_type: z.literal(CommandTypes.DisableRemoteDesktop),
        response: z.object({}).optional(),
    }),
    z.object({
        command_type: z.literal(CommandTypes.EnableRemoteDesktop),
        response: z.object({}).optional(),
    }),
    z.object({
        command_type: z.literal(CommandTypes.RotateFileVaultKey),
        payload: RotateFileVaultKeyPayload,
        response: RotateFileVaultKeyResponse.optional(),
    }),
    z.object({
        command_type: z.literal(CommandTypes.SetAutoAdminPassword),
        payload: SetAutoAdminPasswordPayload,
        response: z.object({}).optional(),
    }),
    z.object({
        command_type: z.literal(CommandTypes.Settings),
        payload: SettingsPayload,
        response: SettingsResponse.optional(),
    }),
    z.object({
        command_type: z.literal(CommandTypes.AvailableOSUpdates),
        response: AvailableOSUpdatesResponse.optional(),
    }),
    z.object({
        command_type: z.literal(CommandTypes.ScheduleOSUpdateScan),
        payload: ScheduleOSUpdateScanPayload,
        response: ScheduleOSUpdateScanResponse.optional(),
    }),
    z.object({
        command_type: z.literal(CommandTypes.ScheduleOSUpdate),
        payload: ScheduleOSUpdatePayload,
        response: ScheduleOSUpdateResponse.optional(),
    }),
    z.object({
        command_type: z.literal(CommandTypes.OSUpdateStatus),
        response: OSUpdateStatusResponse.optional(),
    }),
    z.object({
        command_type: z.literal(CommandTypes.UserConfigured),
        response: z.object({}).optional(),
    }),
    z.object({
        command_type: z.literal(CommandTypes.DeleteUser),
        payload: DeleteUserPayload,
        response: z.object({}).optional(),
    }),
    z.object({
        command_type: z.literal(CommandTypes.UserList),
        response: UserListResponse.optional(),
    }),
    z.object({
        command_type: z.literal(CommandTypes.LogOutUser),
        response: z.object({}).optional(),
    }),
    z.object({
        command_type: z.literal(CommandTypes.UnlockUserAccount),
        payload: UnlockUserAccountPayload,
        response: z.object({}).optional(),
    }),
]);
